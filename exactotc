"""
    @mateoetam on Github
"""

import numpy as np
import time
import ot

def ind_coupling(Px, Py):
    """
    Given two transition matrices Px and Py, return the independent coupling of them.
    :param Px:
    :param Py:
    :return:
    """
    output = np.kron(Px, Py)
    return output
    
def zeros(tup):
    a = np.zeros(tup)
    return a

def create_coupling_array(Px, Py):
    n = Px.shape[0]
    coupling = np.zeros((n**2, n**2))
    for i in range(n):
        for j in range(n):
            for k in range(n):
                for l in range(n):
                    coupling[i*n+j, k*n+l] = Px[i, k]*Py[j, l]
    return coupling

def exact_tce(P, c):
    '''
    P is a transition coupling matrix
    c is a cost matrix
    c = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    '''
    d = P.shape[0]
    c = np.reshape(c.T, (d, -1))
    
    A = np.block([[np.eye(d) - P, np.zeros((d, d)), np.zeros((d, d))],
                  [np.eye(d), np.eye(d) - P, np.zeros((d, d))],
                  [np.zeros((d, d)), np.eye(d), np.eye(d) - P]])

    b = np.block([[np.zeros((d, 1))], [c], [np.zeros((d, 1))]])
    try:
        sol = np.linalg.solve(A, b)
    except np.linalg.LinAlgError:
        sol = np.linalg.pinv(A) @ b

    g =  sol[0:d]
    h = sol[d:d*2]
    g = g.squeeze()
    h = h.squeeze()
    return g, h





def exact_tci(g, h, P_old, Px, Py):
    """
    exact policy improvement 
    """
    x_sizes = np.shape(Px)
    y_sizes = np.shape(Py)
    dx = x_sizes[0]
    dy = y_sizes[0]
    P = np.zeros((dx*dy, dx*dy))
    g_const = True
    # check if elements of numpy array with dims dx dy are constant
    for i in range(dx):
        for j in range(i+1, dy):
            if np.abs(g[i] - g[j]) > .001:
                g_const = False

    # if g not constant, improve transition coupling against g
    if not g_const:
        g_mat = np.reshape(g, (dy, dx), 'F') # no need to transpose

        for x_row in range(dx):
            for y_row in range(dy):
                dist_x = Px[x_row, :] # row vectors
                dist_y = Py[y_row, :]
                if np.any(dist_x == 1) or np.any(dist_y == 1): # check if degenerate
                    sol = np.outer(dist_x, dist_y)
                else: # if not degenerate, proceed w/ OT
                    sol = ot.emd(dist_x, dist_y, g_mat.T) # need to use pythonot package / sinkhorns algorithm: T_reg = ot.sinkhorn(a, b, M, reg)
                    print (sol)
                idx = dy * x_row + y_row
                P[idx, :] = np.reshape(sol.T, (-1, dx*dy))


        if np.max(np.abs(np.dot(P_old, g) - np.dot(P, g))) <= 1e-7:
            P = P_old
        else:
            return P
            
    # Try to improve with respect to h.
    h_mat = np.reshape(h, (dx, dy)).T #other syntax also works
    for x_row in range(dx):
        for y_row in range(dy):
            dist_x = Px[x_row, :]
            dist_y = Py[y_row, :]
            
            # check distribution is degenerate.
            if np.any(dist_x == 1) or np.any(dist_y == 1):
                sol = np.outer(dist_x, dist_y)
            else: # proceed with OT
                sol = ot.emd(dist_x, dist_y, h_mat.T)
            
            idx = dy * (x_row) + y_row
            P[idx, :] = np.reshape(sol.T, (-1, dx*dy))
    
    if np.max(np.abs(np.dot(P_old, h) - np.dot(P, h))) <= 1e-4:
        P = P_old
    
    return P

def exact_otc(Px, Py, c, time_iters=None):

    dx = np.size(Px, axis=0)
    dy = np.size(Py, axis=0)
    x = np.multiply(dx, dy)
    P_old = zeros(x)
    P = create_coupling_array(Px, Py)

    exp_cost = 0
    times = []
    iter_ctr = 0


    while np.max(np.abs(P-P_old)): #not converged
        iter_ctr += 1
        P_old = P
        print('ExactOTC Iteration:', iter_ctr)

        if time_iters:
            tic = time.time()
        
        # policy evaluation
        g, h = exact_tce(P, c)
        exp_cost = np.min(g)


        # policy improvement
        P = exact_tci(g, h, P_old, Px, Py)
        
        if np.all(P == P_old):
            return exp_cost, P, times
    return exp_cost, P, times

Px = np.array([[0.25, 0.25, 0.5], [0.25, 0.25, 0.5], [0.25, 0.25, 0.5]])
Py = np.array([[0.25, 0.25, 0.5], [0.25, 0.25, 0.5], [0.5, 0.25, 0.25]])
c = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
P = create_coupling_array(Px, Py)
print (exact_otc(Px, Py, c))